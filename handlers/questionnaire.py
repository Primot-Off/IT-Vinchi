from pathlib import Path
from datetime import datetime
import pytz, asyncio

from aiogram import Router, F, Bot
from aiogram.types import Message, InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext, StorageKey
from aiogram.fsm.storage.memory import MemoryStorage

from utils.states import Questionnaire, Menu

from keyboards.builders import builder_buttons
from keyboards.reply import rmk

from database.db import *

from handlers.checks import is_valid_github_url, is_valid_language
from handlers.actions import *

router = Router()

storage = MemoryStorage()

moscow_tz = pytz.timezone('Europe/Moscow') # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è

# ------ –ê–Ω–∫–µ—Ç–∞ ------

@router.message(F.text.lower() == "‚úç —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def create_profile(message: Message, state: FSMContext):
    pool = await create_db_pool()
    if await user_exists(pool, message.from_user.id) is False:
        await state.set_state(Questionnaire.name)
        await message.answer(
            "ü§© –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            reply_markup=builder_buttons(message.from_user.first_name) # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        )

@router.message(Questionnaire.name)
async def questionnaire_name(message: Message, state: FSMContext):
    if len(message.text) < 3:
        return await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞).")
    await state.update_data(name=message.text)
    await state.set_state(Questionnaire.age)
    await message.answer("üóì –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=rmk)

@router.message(Questionnaire.age)
async def questionnaire_age(message: Message, state: FSMContext):
    try:
        if message.text.isdigit() and int(message.text) > 0 and int(message.text) < 150:
            await state.update_data(age=int(message.text))
            await state.set_state(Questionnaire.github)
            await message.answer(
                "üíª –£–∫–∞–∂–∏ —Å–≤–æ–π GitHub –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n–ü—Ä–∏–º–µ—Ä:\n<i>https://github.com/Primot-Off</i>",
                reply_markup=builder_buttons("–ù–µ—Ç")
                )
        else:
            await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).")
    except Exception as e:
        await message.answer(f"‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).\n\n–û—à–∏–±–∫–∞: {e}")


@router.message(Questionnaire.github)
async def questionnaire_github(message: Message, state: FSMContext):
    if message.text.lower() == "–Ω–µ—Ç":
        await state.update_data(github=None)
        await state.set_state(Questionnaire.about)
        await message.answer("üë§ –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ\n\nüíº –ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥, –±—ç–∫–µ–Ω–¥, –¥–∏–∑–∞–π–Ω, ML –∏ —Ç.–¥.)\nüõ† –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–ª–∏ —è–∑—ã–∫–∏ –∑–Ω–∞–µ—à—å?\nüéØ –ß—Ç–æ –∏—â–µ—à—å: –æ–±—â–µ–Ω–∏–µ, –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –∏–¥–µ–∏, –ø—Ä–æ–µ–∫—Ç—ã?\nüåç –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞?\nüéÆ –ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –≤–Ω–µ –∫–æ–¥–∏–Ω–≥–∞?", reply_markup=rmk)
    elif await is_valid_github_url(message.text):
        await state.update_data(github=message.text)
        await state.set_state(Questionnaire.about)
        await message.answer("üë§ –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ\n\nüíº –ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥, –±—ç–∫–µ–Ω–¥, –¥–∏–∑–∞–π–Ω, ML –∏ —Ç.–¥.)\nüõ† –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–ª–∏ —è–∑—ã–∫–∏ –∑–Ω–∞–µ—à—å?\nüéØ –ß—Ç–æ –∏—â–µ—à—å: –æ–±—â–µ–Ω–∏–µ, –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –∏–¥–µ–∏, –ø—Ä–æ–µ–∫—Ç—ã?\nüåç –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞?\nüéÆ –ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –≤–Ω–µ –∫–æ–¥–∏–Ω–≥–∞?", reply_markup=rmk)
    else:
        await message.answer(
            "‚ùóÔ∏è –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\n–ü—Ä–∏–º–µ—Ä:\n<i>https://github.com/Primot-Off</i>",
            reply_markup=builder_buttons("–ù–µ—Ç")
            )

@router.message(Questionnaire.about)
async def questionnaire_about(message: Message, state: FSMContext):
    if len(message.text) < 5:
        return await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
    if len(message.text) > 500:
        return await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤.")
    await state.update_data(about=message.text)
    await state.set_state(Questionnaire.languages)
    await message.answer(
        "‚úèÔ∏è –í—ã–ø–∏—à–∏ —Å–ø–∏—Å–∫–æ–º —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —è–∑—ã–∫–∏ —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ —Ç.–ø., —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä:\n<i>Python, HTML, Java</i>",
        reply_markup=builder_buttons("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        )
    
@router.message(Questionnaire.languages)
async def questionnaire_languages(message: Message, state: FSMContext):
    if message.text.lower() == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        await state.set_state(Questionnaire.photos)
        return await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", reply_markup=builder_buttons("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    elif message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(languages=[])
        await state.set_state(Questionnaire.photos)
        return await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", reply_markup=builder_buttons("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))
    languages = [lang.strip() for lang in message.text.split(",")]
    languages_are_not_valid = []
    for lang in languages:
        if await is_valid_language(lang.lower()) is False:
            languages_are_not_valid.append(lang)
    await state.update_data(languages=languages)
    if len(languages_are_not_valid) > 0:
        return await message.answer(
            f"‚ùóÔ∏è–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —è–∑—ã–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã: {', '.join(languages_are_not_valid)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –∏ –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —è–∑—ã–∫–∏ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ <a href='https://t.me/PrimotOff/'>–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>.",
            reply_markup=builder_buttons("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            )
    await state.set_state(Questionnaire.photos)
    await message.answer(
        "üì∏ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
        reply_markup=builder_buttons("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    )

@router.message(Questionnaire.photos, F.photo)
async def questionnaire_photos(message: Message, state: FSMContext, bot: Bot):
    await asyncio.sleep(1)
    await message.bot.send_chat_action(message.chat.id, "typing")
    time_now = int(datetime.now(moscow_tz).timestamp())
    await state.update_data(photos=time_now)
    data = await state.get_data()
    await state.clear()
    await asyncio.sleep(1) # —á—Ç–æ–±—ã —Ñ–∞–π–ª —É—Å–ø–µ–ª —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
    if data.get("name") is None: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–Ω–∞–µ—Ç –∫–∞–∫ —ç—Ç–æ –ø–æ-–¥—Ä—É–≥–æ–º—É –ø–æ—Ñ–∏–∫—Å–∏—Ç—å, —Ç–æ –≤ —Ç–≥ @PrimotOff
        return
    await download_photo(message, time_now)
    
    pool = await create_db_pool()
    await create_user(
        pool,
        user_id = message.from_user.id,
        name = data["name"],
        age = data["age"],
        github = data.get("github"),
        about = data["about"],
        languages = data["languages"],
        photos = data["photos"]
    )
    languages = data.get('languages') or []
    languages_str = f"–Ø–∑—ã–∫–∏:\n{', '.join(languages)}\n" if languages else ""
    folder = Path(f"database/users/{message.from_user.id}/photos/{time_now}")
    photos = [p for p in folder.iterdir() if p.suffix.lower() in [".jpg", ".jpeg", ".png", ".webp"]]
    media = []
    for idx, photo in enumerate(photos):
        file = FSInputFile(photo)
        if idx == 0:
            if data.get("github") is not None:
                media.append(InputMediaPhoto(media=file, caption=f"""
<b>{data['name']}</b>, {data['age']} –ª–µ—Ç
{languages_str}{f"\n- {data['about']}\n" if data.get('about') else ""}
üìÇ <a href='{data["github"]}'>GitHub</a>"""))
            else:
                media.append(InputMediaPhoto(media=file, caption=f"""
<b>{data['name']}</b>, {data['age']} –ª–µ—Ç
{languages_str}{f"\n- {data['about']}" if data.get('about') else ""}"""))
        else:
            media.append(InputMediaPhoto(media=file))
    await message.answer("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:", reply_markup=rmk)
    await bot.send_media_group(chat_id = message.chat.id, media=media)
    await state.set_state(Menu.profile)
    user_data = await get_user_data(pool, message.from_user.id)
    if user_data.get('liked_it'):
        liked_it = user_data['liked_it'].split(", ")
        if len(liked_it) > 0:
            return await message.answer(f"1. –ü–æ–∫–∞–∑–∞—Ç—å –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ü–µ–Ω–∏–ª–∏ –º–æ—é –∞–Ω–∫–µ—Ç—É.\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ\n3. –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", reply_markup = builder_buttons(["1üëç", "2", "3"]))
    return await message.answer("1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ\n3. –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", reply_markup = builder_buttons(["1", "2", "3"]))

@router.message(Questionnaire.photos)
async def questionnaire_photos_not_photo(message: Message, state: FSMContext, bot: Bot):
    if not message.photo:
        if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            await message.bot.send_chat_action(message.chat.id, "typing")
            pool = await create_db_pool()
            await state.update_data(photos=None)
            data = await state.get_data()
            await create_user(
                pool,
                user_id = message.from_user.id,
                name = data["name"],
                age = data["age"],
                github = data.get("github"),
                about = data["about"],
                languages = data["languages"],
                photos = data["photos"]
            )
            await state.clear()
            await message.answer("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:")
            languages = data.get('languages') or []
            languages_str = f"–Ø–∑—ã–∫–∏:\n{', '.join(languages)}\n" if languages else ""
            if data.get("github") is not None:
                return await message.answer(f"""
<b>{data['name']}</b>, {data['age']} –ª–µ—Ç
{languages_str}{f"\n- {data['about']}\n" if data.get('about') else ""}
üìÇ <a href='{data["github"]}'>GitHub</a>
""", reply_markup=rmk)
            else:
                await message.answer(f"""
<b>{data['name']}</b>, {data['age']} –ª–µ—Ç
{languages_str}{f"\n- {data['about']}" if data.get('about') else ""}
""", reply_markup=rmk
            )
            await state.set_state(Menu.profile)
            user_data = await get_user_data(pool, message.from_user.id)
            if user_data.get('liked_it'):
                liked_it = user_data['liked_it'].split(", ")
                if len(liked_it) > 0:
                    return await message.answer(f"1. –ü–æ–∫–∞–∑–∞—Ç—å –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ü–µ–Ω–∏–ª–∏ –º–æ—é –∞–Ω–∫–µ—Ç—É.\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ\n3. –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", reply_markup = builder_buttons(["1üëç", "2", "3"]))
            return await message.answer("1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ\n3. –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", reply_markup = builder_buttons(["1", "2", "3"]))
        await message.answer(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∞–Ω–∫–µ—Ç—ã",
            reply_markup=builder_buttons("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        )

# ------ –ú–µ–Ω—é ------

@router.message(Menu.main)
async def menu_main(message: Message, state: FSMContext, bot: Bot):
    await message.bot.send_chat_action(message.chat.id, "typing")
    pool = await create_db_pool()
    text = message.text
    if text == "1":
        return await view_questionnaires(pool, message.from_user.id, message, bot, state)
    if text == "2":
        return await state_menu_profile(message, pool, bot, state)
    if text == "3":
        await included_update(pool, message.from_user.id)
        user_data = await get_user_data(pool, message.from_user.id)
        if user_data.get('liked_it'):
            liked_it = user_data['liked_it'].split(", ")
            if len(liked_it) > 0:
                return await message.answer(f"1. –ü–æ–∫–∞–∑–∞—Ç—å –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ü–µ–Ω–∏–ª–∏ –º–æ—é –∞–Ω–∫–µ—Ç—É.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞\n3. {'–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' if user_data['included'] == 1 else '–í–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' }", reply_markup = builder_buttons(["1üëç", "2", "3"]))
        return await message.answer(f"1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞\n3. {'–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' if user_data['included'] == 1 else '–í–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' }", reply_markup = builder_buttons(["1", "2", "3"]))
    
@router.message(Menu.profile)
async def menu_profile(message: Message, state: FSMContext, bot: Bot):
    await message.bot.send_chat_action(message.chat.id, "typing")
    text = message.text
    if text == "1":
        pool = await create_db_pool()
        return await view_questionnaires(pool, message.from_user.id, message, bot, state)
    if text == "2":
        await state.set_state(Questionnaire.name)
        return await message.answer(
            "ü§© –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            reply_markup=builder_buttons(message.from_user.first_name)
        )
    if text == "3":
        return await state_menu_profile_edit(message, state)


@router.message(Menu.profile_edit)
async def menu_profile_edit(message: Message, state: FSMContext, bot: Bot):
    text = message.text
    if text == "1":
        await state.set_state(Menu.profile_edit_about)
        return await message.answer("üë§ –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ\n\nüíº –ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥, –±—ç–∫–µ–Ω–¥, –¥–∏–∑–∞–π–Ω, ML –∏ —Ç.–¥.)\nüõ† –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–ª–∏ —è–∑—ã–∫–∏ –∑–Ω–∞–µ—à—å?\nüéØ –ß—Ç–æ –∏—â–µ—à—å: –æ–±—â–µ–Ω–∏–µ, –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –∏–¥–µ–∏, –ø—Ä–æ–µ–∫—Ç—ã?\nüåç –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞?\nüéÆ –ß–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –≤–Ω–µ –∫–æ–¥–∏–Ω–≥–∞?", reply_markup=builder_buttons(["–û—Ç–º–µ–Ω–∞", "–£–¥–∞–ª–∏—Ç—å"]))
    if text == "2":
        await state.set_state(Menu.profile_edit_languages)
        return await message.answer(
            "‚úèÔ∏è –í—ã–ø–∏—à–∏ —Å–ø–∏—Å–∫–æ–º —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —è–∑—ã–∫–∏ —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ —Ç.–ø., —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n\n–ü—Ä–∏–º–µ—Ä:\n<i>Python, HTML, Java</i>",
            reply_markup=builder_buttons(["–û—Ç–º–µ–Ω–∞", "–£–¥–∞–ª–∏—Ç—å"])
        )
    if text == "3":
        await state.set_state(Menu.profile_edit_photos)
        return await message.answer("üì∏ –ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", reply_markup=builder_buttons(["–û—Ç–º–µ–Ω–∞", "–£–¥–∞–ª–∏—Ç—å"]))
    if text == "4":
        pool = await create_db_pool()
        return await state_menu_profile(message, pool, bot, state)

@router.message(Menu.profile_edit_about)
async def menu_profile_edit_about(message: Message, state: FSMContext, bot: Bot):
    await message.bot.send_chat_action(message.chat.id, "typing")
    text = message.text
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await state_menu_profile_edit(message, state)
    if len(message.text) < 5:
        return await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
    if len(message.text) > 500:
        return await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤.")
    pool = await create_db_pool()
    await about_update(pool, message.from_user.id, text)
    return await state_menu_profile(message, pool, bot, state)


@router.message(Menu.profile_edit_languages)
async def menu_profile_edit_languages(message: Message, state: FSMContext, bot: Bot):
    await message.bot.send_chat_action(message.chat.id, "typing")
    text = message.text
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await state_menu_profile_edit(message, state)
    languages = [lang.strip() for lang in text.split(",")]
    if text == "–£–¥–∞–ª–∏—Ç—å":
        languages = []
    languages_are_not_valid = []
    for lang in languages:
        if await is_valid_language(lang.lower()) is False:
            languages_are_not_valid.append(lang)
    if len(languages_are_not_valid) > 0:
        return await message.answer(
            f"‚ùóÔ∏è–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —è–∑—ã–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã: {', '.join(languages_are_not_valid)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –∏ –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —è–∑—ã–∫–∏ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ <a href='https://t.me/PrimotOff/'>–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>.",
            reply_markup=builder_buttons(["–û—Ç–º–µ–Ω–∞", "–£–¥–∞–ª–∏—Ç—å"])
            )
    pool = await create_db_pool()
    await languages_update(pool, message.from_user.id, languages)
    return await state_menu_profile(message, pool, bot, state)

@router.message(Menu.profile_edit_photos, F.photo)
async def menu_profile_edit_photos(message: Message, state: FSMContext, bot: Bot):
    await message.bot.send_chat_action(message.chat.id, "typing")
    time_now = int(datetime.now(moscow_tz).timestamp())
    await download_photo(message, time_now)
    data = await state.get_data()
    if time_now != data.get("profile_edit_photos"):
        await state.update_data(profile_edit_photos=time_now)
        pool = await create_db_pool()
        await photos_update(pool, message.from_user.id, time_now)
        return await state_menu_profile(message, pool, bot, state)
    pass

@router.message(Menu.profile_edit_photos)
async def menu_profile_edit_photos_not(message: Message, state: FSMContext, bot: Bot):
    await message.bot.send_chat_action(message.chat.id, "typing")
    text = message.text
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await state_menu_profile_edit(message, state)
    if text.lower() == "—É–¥–∞–ª–∏—Ç—å":
        time_now = int(datetime.now(moscow_tz).timestamp())
        folder = Path(f"database/users/{message.from_user.id}/photos/{time_now}")
        folder.mkdir(parents=True, exist_ok=True)
        pool = await create_db_pool()
        await photos_update(pool, message.from_user.id, text)
        return await state_menu_profile(message, pool, bot, state)
    return await message.answer(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∞–Ω–∫–µ—Ç—ã",
            reply_markup=builder_buttons(["–û—Ç–º–µ–Ω–∞", "–£–¥–∞–ª–∏—Ç—å"])
        )


@router.message(Menu.view)
async def menu_view(message: Message, state: FSMContext, bot: Bot):
    await message.bot.send_chat_action(message.chat.id, "typing")
    text = message.text 
    pool = await create_db_pool()
    if text == "‚ù§Ô∏è":
        data = await state.get_data()
        await like_the_profile(pool, message.from_user.id, data['view'])
        like_user = await get_user_data(pool, data['view'])
        try:
            await bot.send_message(data['view'], f"–¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –ª–∞–π–∫–Ω—É–ª–∏ {len(like_user['liked_it'].split(", "))} {await plural_raz(len(like_user['liked_it'].split(", ")))}.\n\n1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å\n2. –ù–∞–∑–∞–¥", reply_markup = builder_buttons(["1üëç", "2‚ùå"]))
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
            print(e)
        return await view_questionnaires(pool, message.from_user.id, message, bot, state)
    if text == "üëé":
        return await view_questionnaires(pool, message.from_user.id, message, bot, state)
    if text == "üí§":
        await state.set_state(Menu.main)
        user_data = await get_user_data(pool, message.from_user.id)
        if user_data.get('liked_it'):
            liked_it = user_data['liked_it'].split(", ")
            if len(liked_it) > 0:
                return await message.answer(f"1. –ü–æ–∫–∞–∑–∞—Ç—å –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ü–µ–Ω–∏–ª–∏ –º–æ—é –∞–Ω–∫–µ—Ç—É.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞\n3. {'–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' if user_data['included'] == 1 else '–í–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' }", reply_markup = builder_buttons(["1üëç", "2", "3"]))
        return await message.answer(f"1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞\n3. {'–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' if user_data['included'] == 1 else '–í–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' }", reply_markup = builder_buttons(["1", "2", "3"]))
    

@router.message(Menu.feedback_likes)
async def feedback_likes(message: Message, state: FSMContext, bot: Bot):
    await message.bot.send_chat_action(message.chat.id, "typing")
    text = message.text
    if text == "‚ù§Ô∏è":
        data = await state.get_data()
        if data.get('feedback_likes'):
            user = await bot.get_chat(int(data['feedback_likes']))
            await message.answer(f"–ù–∞—á–Ω–∏ –æ–±—â–∞—Ç—å—Å—è —Å <a href='t.me/{user.username}'>{user.first_name}</a>")
            try:
                await bot.send_message(int(data['feedback_likes']), f"üéâ –¢–≤–æ—é –∑–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª–∏\n–ù–∞—á–Ω–∏ –æ–±—â–∞—Ç—å—Å—è —Å <a href='t.me/{message.from_user.username}'>{message.from_user.first_name}</a>")
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    pool = await create_db_pool()
    if text == "üí§":
        await state.set_state(Menu.main)
        user_data = await get_user_data(pool, message.from_user.id)
        if user_data.get('liked_it'):
            liked_it = user_data['liked_it'].split(", ")
            if len(liked_it) > 0:
                return await message.answer(f"1. –ü–æ–∫–∞–∑–∞—Ç—å –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ü–µ–Ω–∏–ª–∏ –º–æ—é –∞–Ω–∫–µ—Ç—É.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞\n3. {'–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' if user_data['included'] == 1 else '–í–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' }", reply_markup = builder_buttons(["1üëç", "2", "3"]))
        return await message.answer(f"1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞\n3. {'–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' if user_data['included'] == 1 else '–í–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫' }", reply_markup = builder_buttons(["1", "2", "3"]))
    return await view_likes(pool, message, message.from_user.id, bot, state)